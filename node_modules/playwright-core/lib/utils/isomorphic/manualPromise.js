"use strict";
<<<<<<< HEAD
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var manualPromise_exports = {};
__export(manualPromise_exports, {
  LongStandingScope: () => LongStandingScope,
  ManualPromise: () => ManualPromise
});
module.exports = __toCommonJS(manualPromise_exports);
var import_builtins = require("./builtins");
var import_stackTrace = require("./stackTrace");
=======

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ManualPromise = exports.LongStandingScope = void 0;
var _stackTrace = require("./stackTrace");
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
class ManualPromise extends Promise {
  constructor() {
    let resolve;
    let reject;
    super((f, r) => {
      resolve = f;
      reject = r;
    });
<<<<<<< HEAD
=======
    this._resolve = void 0;
    this._reject = void 0;
    this._isDone = void 0;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    this._isDone = false;
    this._resolve = resolve;
    this._reject = reject;
  }
  isDone() {
    return this._isDone;
  }
  resolve(t) {
    this._isDone = true;
    this._resolve(t);
  }
  reject(e) {
    this._isDone = true;
    this._reject(e);
  }
  static get [Symbol.species]() {
    return Promise;
  }
  get [Symbol.toStringTag]() {
<<<<<<< HEAD
    return "ManualPromise";
  }
}
class LongStandingScope {
  constructor() {
    this._terminatePromises = new import_builtins.Map();
=======
    return 'ManualPromise';
  }
}
exports.ManualPromise = ManualPromise;
class LongStandingScope {
  constructor() {
    this._terminateError = void 0;
    this._closeError = void 0;
    this._terminatePromises = new Map();
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    this._isClosed = false;
  }
  reject(error) {
    this._isClosed = true;
    this._terminateError = error;
<<<<<<< HEAD
    for (const p of this._terminatePromises.keys())
      p.resolve(error);
=======
    for (const p of this._terminatePromises.keys()) p.resolve(error);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  }
  close(error) {
    this._isClosed = true;
    this._closeError = error;
<<<<<<< HEAD
    for (const [p, frames] of this._terminatePromises)
      p.resolve(cloneError(error, frames));
=======
    for (const [p, frames] of this._terminatePromises) p.resolve(cloneError(error, frames));
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  }
  isClosed() {
    return this._isClosed;
  }
  static async raceMultiple(scopes, promise) {
<<<<<<< HEAD
    return Promise.race(scopes.map((s) => s.race(promise)));
=======
    return Promise.race(scopes.map(s => s.race(promise)));
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  }
  async race(promise) {
    return this._race(Array.isArray(promise) ? promise : [promise], false);
  }
  async safeRace(promise, defaultValue) {
    return this._race([promise], true, defaultValue);
  }
  async _race(promises, safe, defaultValue) {
    const terminatePromise = new ManualPromise();
<<<<<<< HEAD
    const frames = (0, import_stackTrace.captureRawStack)();
    if (this._terminateError)
      terminatePromise.resolve(this._terminateError);
    if (this._closeError)
      terminatePromise.resolve(cloneError(this._closeError, frames));
    this._terminatePromises.set(terminatePromise, frames);
    try {
      return await Promise.race([
        terminatePromise.then((e) => safe ? defaultValue : Promise.reject(e)),
        ...promises
      ]);
=======
    const frames = (0, _stackTrace.captureRawStack)();
    if (this._terminateError) terminatePromise.resolve(this._terminateError);
    if (this._closeError) terminatePromise.resolve(cloneError(this._closeError, frames));
    this._terminatePromises.set(terminatePromise, frames);
    try {
      return await Promise.race([terminatePromise.then(e => safe ? defaultValue : Promise.reject(e)), ...promises]);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    } finally {
      this._terminatePromises.delete(terminatePromise);
    }
  }
}
<<<<<<< HEAD
=======
exports.LongStandingScope = LongStandingScope;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
function cloneError(error, frames) {
  const clone = new Error();
  clone.name = error.name;
  clone.message = error.message;
<<<<<<< HEAD
  clone.stack = [error.name + ":" + error.message, ...frames].join("\n");
  return clone;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LongStandingScope,
  ManualPromise
});
=======
  clone.stack = [error.name + ':' + error.message, ...frames].join('\n');
  return clone;
}
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
