"use strict";
<<<<<<< HEAD
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var protocolError_exports = {};
__export(protocolError_exports, {
  ProtocolError: () => ProtocolError,
  isProtocolError: () => isProtocolError,
  isSessionClosedError: () => isSessionClosedError
});
module.exports = __toCommonJS(protocolError_exports);
var import_stackTrace = require("../utils/isomorphic/stackTrace");
class ProtocolError extends Error {
  constructor(type, method, logs) {
    super();
=======

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProtocolError = void 0;
exports.isProtocolError = isProtocolError;
exports.isSessionClosedError = isSessionClosedError;
var _stackTrace = require("../utils/isomorphic/stackTrace");
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class ProtocolError extends Error {
  constructor(type, method, logs) {
    super();
    this.type = void 0;
    this.method = void 0;
    this.logs = void 0;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    this.type = type;
    this.method = method;
    this.logs = logs;
  }
  setMessage(message) {
<<<<<<< HEAD
    (0, import_stackTrace.rewriteErrorMessage)(this, `Protocol error (${this.method}): ${message}`);
  }
  browserLogMessage() {
    return this.logs ? "\nBrowser logs:\n" + this.logs : "";
  }
}
=======
    (0, _stackTrace.rewriteErrorMessage)(this, `Protocol error (${this.method}): ${message}`);
  }
  browserLogMessage() {
    return this.logs ? '\nBrowser logs:\n' + this.logs : '';
  }
}
exports.ProtocolError = ProtocolError;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
function isProtocolError(e) {
  return e instanceof ProtocolError;
}
function isSessionClosedError(e) {
<<<<<<< HEAD
  return e instanceof ProtocolError && (e.type === "closed" || e.type === "crashed");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ProtocolError,
  isProtocolError,
  isSessionClosedError
});
=======
  return e instanceof ProtocolError && (e.type === 'closed' || e.type === 'crashed');
}
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
