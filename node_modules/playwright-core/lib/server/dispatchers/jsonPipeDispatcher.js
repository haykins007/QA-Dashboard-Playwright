"use strict";
<<<<<<< HEAD
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var jsonPipeDispatcher_exports = {};
__export(jsonPipeDispatcher_exports, {
  JsonPipeDispatcher: () => JsonPipeDispatcher
});
module.exports = __toCommonJS(jsonPipeDispatcher_exports);
var import_dispatcher = require("./dispatcher");
var import_crypto = require("../utils/crypto");
class JsonPipeDispatcher extends import_dispatcher.Dispatcher {
  constructor(scope) {
    super(scope, { guid: "jsonPipe@" + (0, import_crypto.createGuid)() }, "JsonPipe", {});
    this._type_JsonPipe = true;
  }
  async send(params) {
    this.emit("message", params.message);
  }
  async close() {
    this.emit("close");
    if (!this._disposed) {
      this._dispatchEvent("closed", {});
=======

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JsonPipeDispatcher = void 0;
var _dispatcher = require("./dispatcher");
var _crypto = require("../utils/crypto");
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class JsonPipeDispatcher extends _dispatcher.Dispatcher {
  constructor(scope) {
    super(scope, {
      guid: 'jsonPipe@' + (0, _crypto.createGuid)()
    }, 'JsonPipe', {});
    this._type_JsonPipe = true;
  }
  async send(params) {
    this.emit('message', params.message);
  }
  async close() {
    this.emit('close');
    if (!this._disposed) {
      this._dispatchEvent('closed', {});
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      this._dispose();
    }
  }
  dispatch(message) {
<<<<<<< HEAD
    if (!this._disposed)
      this._dispatchEvent("message", { message });
  }
  wasClosed(reason) {
    if (!this._disposed) {
      this._dispatchEvent("closed", { reason });
=======
    if (!this._disposed) this._dispatchEvent('message', {
      message
    });
  }
  wasClosed(reason) {
    if (!this._disposed) {
      this._dispatchEvent('closed', {
        reason
      });
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      this._dispose();
    }
  }
  dispose() {
    this._dispose();
  }
}
<<<<<<< HEAD
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  JsonPipeDispatcher
});
=======
exports.JsonPipeDispatcher = JsonPipeDispatcher;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
