"use strict";
<<<<<<< HEAD
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ffInput_exports = {};
__export(ffInput_exports, {
  RawKeyboardImpl: () => RawKeyboardImpl,
  RawMouseImpl: () => RawMouseImpl,
  RawTouchscreenImpl: () => RawTouchscreenImpl
});
module.exports = __toCommonJS(ffInput_exports);
function toModifiersMask(modifiers) {
  let mask = 0;
  if (modifiers.has("Alt"))
    mask |= 1;
  if (modifiers.has("Control"))
    mask |= 2;
  if (modifiers.has("Shift"))
    mask |= 4;
  if (modifiers.has("Meta"))
    mask |= 8;
  return mask;
}
function toButtonNumber(button) {
  if (button === "left")
    return 0;
  if (button === "middle")
    return 1;
  if (button === "right")
    return 2;
=======

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = void 0;
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function toModifiersMask(modifiers) {
  let mask = 0;
  if (modifiers.has('Alt')) mask |= 1;
  if (modifiers.has('Control')) mask |= 2;
  if (modifiers.has('Shift')) mask |= 4;
  if (modifiers.has('Meta')) mask |= 8;
  return mask;
}
function toButtonNumber(button) {
  if (button === 'left') return 0;
  if (button === 'middle') return 1;
  if (button === 'right') return 2;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  return 0;
}
function toButtonsMask(buttons) {
  let mask = 0;
<<<<<<< HEAD
  if (buttons.has("left"))
    mask |= 1;
  if (buttons.has("right"))
    mask |= 2;
  if (buttons.has("middle"))
    mask |= 4;
=======
  if (buttons.has('left')) mask |= 1;
  if (buttons.has('right')) mask |= 2;
  if (buttons.has('middle')) mask |= 4;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  return mask;
}
class RawKeyboardImpl {
  constructor(client) {
<<<<<<< HEAD
=======
    this._client = void 0;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    this._client = client;
  }
  async keydown(modifiers, keyName, description, autoRepeat) {
    let text = description.text;
<<<<<<< HEAD
    if (text === "\r")
      text = "";
    const { code, key, location } = description;
    await this._client.send("Page.dispatchKeyEvent", {
      type: "keydown",
=======
    // Firefox will figure out Enter by itself
    if (text === '\r') text = '';
    const {
      code,
      key,
      location
    } = description;
    await this._client.send('Page.dispatchKeyEvent', {
      type: 'keydown',
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      keyCode: description.keyCodeWithoutLocation,
      code,
      key,
      repeat: autoRepeat,
      location,
      text
    });
  }
  async keyup(modifiers, keyName, description) {
<<<<<<< HEAD
    const { code, key, location } = description;
    await this._client.send("Page.dispatchKeyEvent", {
      type: "keyup",
=======
    const {
      code,
      key,
      location
    } = description;
    await this._client.send('Page.dispatchKeyEvent', {
      type: 'keyup',
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      key,
      keyCode: description.keyCodeWithoutLocation,
      code,
      location,
      repeat: false
    });
  }
  async sendText(text) {
<<<<<<< HEAD
    await this._client.send("Page.insertText", { text });
  }
}
class RawMouseImpl {
  constructor(client) {
    this._client = client;
  }
  async move(x, y, button, buttons, modifiers, forClick) {
    await this._client.send("Page.dispatchMouseEvent", {
      type: "mousemove",
=======
    await this._client.send('Page.insertText', {
      text
    });
  }
}
exports.RawKeyboardImpl = RawKeyboardImpl;
class RawMouseImpl {
  constructor(client) {
    this._client = void 0;
    this._page = void 0;
    this._client = client;
  }
  async move(x, y, button, buttons, modifiers, forClick) {
    await this._client.send('Page.dispatchMouseEvent', {
      type: 'mousemove',
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      button: 0,
      buttons: toButtonsMask(buttons),
      x: Math.floor(x),
      y: Math.floor(y),
      modifiers: toModifiersMask(modifiers)
    });
  }
  async down(x, y, button, buttons, modifiers, clickCount) {
<<<<<<< HEAD
    await this._client.send("Page.dispatchMouseEvent", {
      type: "mousedown",
=======
    await this._client.send('Page.dispatchMouseEvent', {
      type: 'mousedown',
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      button: toButtonNumber(button),
      buttons: toButtonsMask(buttons),
      x: Math.floor(x),
      y: Math.floor(y),
      modifiers: toModifiersMask(modifiers),
      clickCount
    });
  }
  async up(x, y, button, buttons, modifiers, clickCount) {
<<<<<<< HEAD
    await this._client.send("Page.dispatchMouseEvent", {
      type: "mouseup",
=======
    await this._client.send('Page.dispatchMouseEvent', {
      type: 'mouseup',
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      button: toButtonNumber(button),
      buttons: toButtonsMask(buttons),
      x: Math.floor(x),
      y: Math.floor(y),
      modifiers: toModifiersMask(modifiers),
      clickCount
    });
  }
  async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
<<<<<<< HEAD
    await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, { world: "utility" });
    await this._client.send("Page.dispatchWheelEvent", {
=======
    // Wheel events hit the compositor first, so wait one frame for it to be synced.
    await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
      world: 'utility'
    });
    await this._client.send('Page.dispatchWheelEvent', {
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      deltaX,
      deltaY,
      x: Math.floor(x),
      y: Math.floor(y),
      deltaZ: 0,
      modifiers: toModifiersMask(modifiers)
    });
  }
  setPage(page) {
    this._page = page;
  }
}
<<<<<<< HEAD
class RawTouchscreenImpl {
  constructor(client) {
    this._client = client;
  }
  async tap(x, y, modifiers) {
    await this._client.send("Page.dispatchTapEvent", {
=======
exports.RawMouseImpl = RawMouseImpl;
class RawTouchscreenImpl {
  constructor(client) {
    this._client = void 0;
    this._client = client;
  }
  async tap(x, y, modifiers) {
    await this._client.send('Page.dispatchTapEvent', {
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      x,
      y,
      modifiers: toModifiersMask(modifiers)
    });
  }
}
<<<<<<< HEAD
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RawKeyboardImpl,
  RawMouseImpl,
  RawTouchscreenImpl
});
=======
exports.RawTouchscreenImpl = RawTouchscreenImpl;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
