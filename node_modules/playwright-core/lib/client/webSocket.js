"use strict";
<<<<<<< HEAD
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var webSocket_exports = {};
__export(webSocket_exports, {
  connectOverWebSocket: () => connectOverWebSocket
});
module.exports = __toCommonJS(webSocket_exports);
var import_connection = require("./connection");
=======

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectOverWebSocket = connectOverWebSocket;
var _connection = require("./connection");
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
async function connectOverWebSocket(parentConnection, params) {
  const localUtils = parentConnection.localUtils();
  const transport = localUtils ? new JsonPipeTransport(localUtils) : new WebSocketTransport();
  const connectHeaders = await transport.connect(params);
<<<<<<< HEAD
  const connection = new import_connection.Connection(parentConnection._platform, localUtils, parentConnection._instrumentation, connectHeaders);
  connection.markAsRemote();
  connection.on("close", () => transport.close());
  let closeError;
  const onTransportClosed = (reason) => {
    connection.close(reason || closeError);
  };
  transport.onClose((reason) => onTransportClosed(reason));
  connection.onmessage = (message) => transport.send(message).catch(() => onTransportClosed());
  transport.onMessage((message) => {
=======
  const connection = new _connection.Connection(parentConnection._platform, localUtils, parentConnection._instrumentation, connectHeaders);
  connection.markAsRemote();
  connection.on('close', () => transport.close());
  let closeError;
  const onTransportClosed = reason => {
    connection.close(reason || closeError);
  };
  transport.onClose(reason => onTransportClosed(reason));
  connection.onmessage = message => transport.send(message).catch(() => onTransportClosed());
  transport.onMessage(message => {
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    try {
      connection.dispatch(message);
    } catch (e) {
      closeError = String(e);
<<<<<<< HEAD
      transport.close().catch(() => {
      });
=======
      transport.close().catch(() => {});
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    }
  });
  return connection;
}
class JsonPipeTransport {
  constructor(owner) {
<<<<<<< HEAD
    this._owner = owner;
  }
  async connect(params) {
    const { pipe, headers: connectHeaders } = await this._owner._wrapApiCall(
      async () => {
        return await this._owner._channel.connect(params);
      },
      /* isInternal */
      true
    );
=======
    this._pipe = void 0;
    this._owner = void 0;
    this._owner = owner;
  }
  async connect(params) {
    const {
      pipe,
      headers: connectHeaders
    } = await this._owner._wrapApiCall(async () => {
      return await this._owner._channel.connect(params);
    }, /* isInternal */true);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    this._pipe = pipe;
    return connectHeaders;
  }
  async send(message) {
<<<<<<< HEAD
    await this._owner._wrapApiCall(
      async () => {
        await this._pipe.send({ message });
      },
      /* isInternal */
      true
    );
  }
  onMessage(callback) {
    this._pipe.on("message", ({ message }) => callback(message));
  }
  onClose(callback) {
    this._pipe.on("closed", ({ reason }) => callback(reason));
  }
  async close() {
    await this._owner._wrapApiCall(
      async () => {
        await this._pipe.close().catch(() => {
        });
      },
      /* isInternal */
      true
    );
  }
}
class WebSocketTransport {
=======
    await this._owner._wrapApiCall(async () => {
      await this._pipe.send({
        message
      });
    }, /* isInternal */true);
  }
  onMessage(callback) {
    this._pipe.on('message', ({
      message
    }) => callback(message));
  }
  onClose(callback) {
    this._pipe.on('closed', ({
      reason
    }) => callback(reason));
  }
  async close() {
    await this._owner._wrapApiCall(async () => {
      await this._pipe.close().catch(() => {});
    }, /* isInternal */true);
  }
}
class WebSocketTransport {
  constructor() {
    this._ws = void 0;
  }
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  async connect(params) {
    this._ws = new window.WebSocket(params.wsEndpoint);
    return [];
  }
  async send(message) {
    this._ws.send(JSON.stringify(message));
  }
  onMessage(callback) {
<<<<<<< HEAD
    this._ws.addEventListener("message", (event) => callback(JSON.parse(event.data)));
  }
  onClose(callback) {
    this._ws.addEventListener("close", () => callback());
=======
    this._ws.addEventListener('message', event => callback(JSON.parse(event.data)));
  }
  onClose(callback) {
    this._ws.addEventListener('close', () => callback());
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  }
  async close() {
    this._ws.close();
  }
<<<<<<< HEAD
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  connectOverWebSocket
});
=======
}
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
