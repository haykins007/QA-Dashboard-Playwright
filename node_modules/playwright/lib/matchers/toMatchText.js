"use strict";
<<<<<<< HEAD
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var toMatchText_exports = {};
__export(toMatchText_exports, {
  toMatchText: () => toMatchText
});
module.exports = __toCommonJS(toMatchText_exports);
var import_utils = require("playwright-core/lib/utils");
var import_util = require("../util");
var import_expect = require("./expect");
var import_matcherHint = require("./matcherHint");
var import_expectBundle = require("../common/expectBundle");
async function toMatchText(matcherName, receiver, receiverType, query, expected, options = {}) {
  (0, import_util.expectTypes)(receiver, [receiverType], matcherName);
=======

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toMatchText = toMatchText;
var _utils = require("playwright-core/lib/utils");
var _util = require("../util");
var _expect = require("./expect");
var _matcherHint = require("./matcherHint");
var _expectBundle = require("../common/expectBundle");
/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

async function toMatchText(matcherName, receiver, receiverType, query, expected, options = {}) {
  var _options$timeout;
  (0, _util.expectTypes)(receiver, [receiverType], matcherName);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  const matcherOptions = {
    isNot: this.isNot,
    promise: this.promise
  };
<<<<<<< HEAD
  if (!(typeof expected === "string") && !(expected && typeof expected.test === "function")) {
    throw new Error([
      (0, import_matcherHint.matcherHint)(this, receiver, matcherName, receiver, expected, matcherOptions),
      `${import_utils.colors.bold("Matcher error")}: ${(0, import_expectBundle.EXPECTED_COLOR)("expected")} value must be a string or regular expression`,
      this.utils.printWithType("Expected", expected, this.utils.printExpected)
    ].join("\n\n"));
  }
  const timeout = options.timeout ?? this.timeout;
  const { matches: pass, received, log, timedOut } = await query(!!this.isNot, timeout);
  if (pass === !this.isNot) {
    return {
      name: matcherName,
      message: () => "",
=======
  if (!(typeof expected === 'string') && !(expected && typeof expected.test === 'function')) {
    // Same format as jest's matcherErrorMessage
    throw new Error([(0, _matcherHint.matcherHint)(this, receiver, matcherName, receiver, expected, matcherOptions), `${_utils.colors.bold('Matcher error')}: ${(0, _expectBundle.EXPECTED_COLOR)('expected')} value must be a string or regular expression`, this.utils.printWithType('Expected', expected, this.utils.printExpected)].join('\n\n'));
  }
  const timeout = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : this.timeout;
  const {
    matches: pass,
    received,
    log,
    timedOut
  } = await query(!!this.isNot, timeout);
  if (pass === !this.isNot) {
    return {
      name: matcherName,
      message: () => '',
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      pass,
      expected
    };
  }
<<<<<<< HEAD
  const stringSubstring = options.matchSubstring ? "substring" : "string";
  const receivedString = received || "";
  const messagePrefix = (0, import_matcherHint.matcherHint)(this, receiver, matcherName, "locator", void 0, matcherOptions, timedOut ? timeout : void 0);
  const notFound = received === import_matcherHint.kNoElementsFoundError;
=======
  const stringSubstring = options.matchSubstring ? 'substring' : 'string';
  const receivedString = received || '';
  const messagePrefix = (0, _matcherHint.matcherHint)(this, receiver, matcherName, 'locator', undefined, matcherOptions, timedOut ? timeout : undefined);
  const notFound = received === _matcherHint.kNoElementsFoundError;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  let printedReceived;
  let printedExpected;
  let printedDiff;
  if (pass) {
<<<<<<< HEAD
    if (typeof expected === "string") {
=======
    if (typeof expected === 'string') {
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      if (notFound) {
        printedExpected = `Expected ${stringSubstring}: not ${this.utils.printExpected(expected)}`;
        printedReceived = `Received: ${received}`;
      } else {
        printedExpected = `Expected ${stringSubstring}: not ${this.utils.printExpected(expected)}`;
<<<<<<< HEAD
        const formattedReceived = (0, import_expect.printReceivedStringContainExpectedSubstring)(receivedString, receivedString.indexOf(expected), expected.length);
=======
        const formattedReceived = (0, _expect.printReceivedStringContainExpectedSubstring)(receivedString, receivedString.indexOf(expected), expected.length);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
        printedReceived = `Received string: ${formattedReceived}`;
      }
    } else {
      if (notFound) {
        printedExpected = `Expected pattern: not ${this.utils.printExpected(expected)}`;
        printedReceived = `Received: ${received}`;
      } else {
        printedExpected = `Expected pattern: not ${this.utils.printExpected(expected)}`;
<<<<<<< HEAD
        const formattedReceived = (0, import_expect.printReceivedStringContainExpectedResult)(receivedString, typeof expected.exec === "function" ? expected.exec(receivedString) : null);
=======
        const formattedReceived = (0, _expect.printReceivedStringContainExpectedResult)(receivedString, typeof expected.exec === 'function' ? expected.exec(receivedString) : null);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
        printedReceived = `Received string: ${formattedReceived}`;
      }
    }
  } else {
<<<<<<< HEAD
    const labelExpected = `Expected ${typeof expected === "string" ? stringSubstring : "pattern"}`;
=======
    const labelExpected = `Expected ${typeof expected === 'string' ? stringSubstring : 'pattern'}`;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    if (notFound) {
      printedExpected = `${labelExpected}: ${this.utils.printExpected(expected)}`;
      printedReceived = `Received: ${received}`;
    } else {
<<<<<<< HEAD
      printedDiff = this.utils.printDiffOrStringify(expected, receivedString, labelExpected, "Received string", false);
    }
  }
  const message = () => {
    const resultDetails = printedDiff ? printedDiff : printedExpected + "\n" + printedReceived;
    return messagePrefix + resultDetails + (0, import_util.callLogText)(log);
=======
      printedDiff = this.utils.printDiffOrStringify(expected, receivedString, labelExpected, 'Received string', false);
    }
  }
  const message = () => {
    const resultDetails = printedDiff ? printedDiff : printedExpected + '\n' + printedReceived;
    return messagePrefix + resultDetails + (0, _util.callLogText)(log);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  };
  return {
    name: matcherName,
    expected,
    message,
    pass,
    actual: received,
    log,
<<<<<<< HEAD
    timeout: timedOut ? timeout : void 0
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  toMatchText
});
=======
    timeout: timedOut ? timeout : undefined
  };
}
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
