"use strict";
<<<<<<< HEAD
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var dot_exports = {};
__export(dot_exports, {
  default: () => dot_default
});
module.exports = __toCommonJS(dot_exports);
var import_base = require("./base");
class DotReporter extends import_base.TerminalReporter {
  constructor() {
    super(...arguments);
=======

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _base = require("./base");
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class DotReporter extends _base.TerminalReporter {
  constructor(...args) {
    super(...args);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    this._counter = 0;
  }
  onBegin(suite) {
    super.onBegin(suite);
    console.log(this.generateStartingMessage());
  }
  onStdOut(chunk, test, result) {
    super.onStdOut(chunk, test, result);
<<<<<<< HEAD
    if (!this.config.quiet)
      process.stdout.write(chunk);
  }
  onStdErr(chunk, test, result) {
    super.onStdErr(chunk, test, result);
    if (!this.config.quiet)
      process.stderr.write(chunk);
=======
    if (!this.config.quiet) process.stdout.write(chunk);
  }
  onStdErr(chunk, test, result) {
    super.onStdErr(chunk, test, result);
    if (!this.config.quiet) process.stderr.write(chunk);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  }
  onTestEnd(test, result) {
    super.onTestEnd(test, result);
    if (this._counter === 80) {
<<<<<<< HEAD
      process.stdout.write("\n");
      this._counter = 0;
    }
    ++this._counter;
    if (result.status === "skipped") {
      process.stdout.write(this.screen.colors.yellow("\xB0"));
      return;
    }
    if (this.willRetry(test)) {
      process.stdout.write(this.screen.colors.gray("\xD7"));
      return;
    }
    switch (test.outcome()) {
      case "expected":
        process.stdout.write(this.screen.colors.green("\xB7"));
        break;
      case "unexpected":
        process.stdout.write(this.screen.colors.red(result.status === "timedOut" ? "T" : "F"));
        break;
      case "flaky":
        process.stdout.write(this.screen.colors.yellow("\xB1"));
=======
      process.stdout.write('\n');
      this._counter = 0;
    }
    ++this._counter;
    if (result.status === 'skipped') {
      process.stdout.write(this.screen.colors.yellow('°'));
      return;
    }
    if (this.willRetry(test)) {
      process.stdout.write(this.screen.colors.gray('×'));
      return;
    }
    switch (test.outcome()) {
      case 'expected':
        process.stdout.write(this.screen.colors.green('·'));
        break;
      case 'unexpected':
        process.stdout.write(this.screen.colors.red(result.status === 'timedOut' ? 'T' : 'F'));
        break;
      case 'flaky':
        process.stdout.write(this.screen.colors.yellow('±'));
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
        break;
    }
  }
  onError(error) {
    super.onError(error);
<<<<<<< HEAD
    console.log("\n" + this.formatError(error).message);
=======
    console.log('\n' + this.formatError(error).message);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    this._counter = 0;
  }
  async onEnd(result) {
    await super.onEnd(result);
<<<<<<< HEAD
    process.stdout.write("\n");
    this.epilogue(true);
  }
}
var dot_default = DotReporter;
=======
    process.stdout.write('\n');
    this.epilogue(true);
  }
}
var _default = exports.default = DotReporter;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
