"use strict";
<<<<<<< HEAD
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var github_exports = {};
__export(github_exports, {
  GitHubReporter: () => GitHubReporter,
  default: () => github_default
});
module.exports = __toCommonJS(github_exports);
var import_path = __toESM(require("path"));
var import_utils = require("playwright-core/lib/utils");
var import_utilsBundle = require("playwright-core/lib/utilsBundle");
var import_base = require("./base");
var import_util = require("../util");
class GitHubLogger {
  _log(message, type = "notice", options = {}) {
    message = message.replace(/\n/g, "%0A");
    const configs = Object.entries(options).map(([key, option]) => `${key}=${option}`).join(",");
    console.log((0, import_util.stripAnsiEscapes)(`::${type} ${configs}::${message}`));
  }
  debug(message, options) {
    this._log(message, "debug", options);
  }
  error(message, options) {
    this._log(message, "error", options);
  }
  notice(message, options) {
    this._log(message, "notice", options);
  }
  warning(message, options) {
    this._log(message, "warning", options);
  }
}
class GitHubReporter extends import_base.TerminalReporter {
  constructor(options = {}) {
    super(options);
    this.githubLogger = new GitHubLogger();
    this.screen = { ...this.screen, colors: import_utils.noColors };
=======

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GitHubReporter = void 0;
var _path = _interopRequireDefault(require("path"));
var _utils = require("playwright-core/lib/utils");
var _utilsBundle = require("playwright-core/lib/utilsBundle");
var _base = require("./base");
var _util = require("../util");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class GitHubLogger {
  _log(message, type = 'notice', options = {}) {
    message = message.replace(/\n/g, '%0A');
    const configs = Object.entries(options).map(([key, option]) => `${key}=${option}`).join(',');
    console.log((0, _util.stripAnsiEscapes)(`::${type} ${configs}::${message}`));
  }
  debug(message, options) {
    this._log(message, 'debug', options);
  }
  error(message, options) {
    this._log(message, 'error', options);
  }
  notice(message, options) {
    this._log(message, 'notice', options);
  }
  warning(message, options) {
    this._log(message, 'warning', options);
  }
}
class GitHubReporter extends _base.TerminalReporter {
  constructor(options = {}) {
    super(options);
    this.githubLogger = new GitHubLogger();
    this.screen = {
      ...this.screen,
      colors: _utils.noColors
    };
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
  }
  printsToStdio() {
    return false;
  }
  async onEnd(result) {
    await super.onEnd(result);
    this._printAnnotations();
  }
  onError(error) {
    const errorMessage = this.formatError(error).message;
    this.githubLogger.error(errorMessage);
  }
  _printAnnotations() {
    const summary = this.generateSummary();
    const summaryMessage = this.generateSummaryMessage(summary);
<<<<<<< HEAD
    if (summary.failuresToPrint.length)
      this._printFailureAnnotations(summary.failuresToPrint);
=======
    if (summary.failuresToPrint.length) this._printFailureAnnotations(summary.failuresToPrint);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    this._printSlowTestAnnotations();
    this._printSummaryAnnotation(summaryMessage);
  }
  _printSlowTestAnnotations() {
    this.getSlowTests().forEach(([file, duration]) => {
<<<<<<< HEAD
      const filePath = workspaceRelativePath(import_path.default.join(process.cwd(), file));
      this.githubLogger.warning(`${filePath} took ${(0, import_utilsBundle.ms)(duration)}`, {
        title: "Slow Test",
=======
      const filePath = workspaceRelativePath(_path.default.join(process.cwd(), file));
      this.githubLogger.warning(`${filePath} took ${(0, _utilsBundle.ms)(duration)}`, {
        title: 'Slow Test',
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
        file: filePath
      });
    });
  }
  _printSummaryAnnotation(summary) {
    this.githubLogger.notice(summary, {
<<<<<<< HEAD
      title: "\u{1F3AD} Playwright Run Summary"
=======
      title: 'ðŸŽ­ Playwright Run Summary'
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    });
  }
  _printFailureAnnotations(failures) {
    failures.forEach((test, index) => {
      const title = this.formatTestTitle(test);
<<<<<<< HEAD
      const header = this.formatTestHeader(test, { indent: "  ", index: index + 1, mode: "error" });
      for (const result of test.results) {
        const errors = (0, import_base.formatResultFailure)(this.screen, test, result, "    ");
        for (const error of errors) {
          const options = {
            file: workspaceRelativePath(error.location?.file || test.location.file),
=======
      const header = this.formatTestHeader(test, {
        indent: '  ',
        index: index + 1,
        mode: 'error'
      });
      for (const result of test.results) {
        const errors = (0, _base.formatResultFailure)(this.screen, test, result, '    ');
        for (const error of errors) {
          var _error$location;
          const options = {
            file: workspaceRelativePath(((_error$location = error.location) === null || _error$location === void 0 ? void 0 : _error$location.file) || test.location.file),
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
            title
          };
          if (error.location) {
            options.line = error.location.line;
            options.col = error.location.column;
          }
<<<<<<< HEAD
          const message = [header, ...(0, import_base.formatRetry)(this.screen, result), error.message].join("\n");
=======
          const message = [header, ...(0, _base.formatRetry)(this.screen, result), error.message].join('\n');
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
          this.githubLogger.error(message, options);
        }
      }
    });
  }
}
<<<<<<< HEAD
function workspaceRelativePath(filePath) {
  return import_path.default.relative(process.env["GITHUB_WORKSPACE"] ?? "", filePath);
}
var github_default = GitHubReporter;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GitHubReporter
});
=======
exports.GitHubReporter = GitHubReporter;
function workspaceRelativePath(filePath) {
  var _process$env$GITHUB_W;
  return _path.default.relative((_process$env$GITHUB_W = process.env['GITHUB_WORKSPACE']) !== null && _process$env$GITHUB_W !== void 0 ? _process$env$GITHUB_W : '', filePath);
}
var _default = exports.default = GitHubReporter;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
