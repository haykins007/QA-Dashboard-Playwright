"use strict";
<<<<<<< HEAD
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var events_exports = {};
__export(events_exports, {
  Disposable: () => Disposable,
  EventEmitter: () => EventEmitter
});
module.exports = __toCommonJS(events_exports);
var Disposable;
((Disposable2) => {
  function disposeAll(disposables) {
    for (const disposable of disposables.splice(0))
      disposable.dispose();
  }
  Disposable2.disposeAll = disposeAll;
})(Disposable || (Disposable = {}));
class EventEmitter {
  constructor() {
    this._listeners = /* @__PURE__ */ new Set();
=======

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventEmitter = exports.Disposable = void 0;
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
let Disposable = exports.Disposable = void 0;
(function (_Disposable) {
  function disposeAll(disposables) {
    for (const disposable of disposables.splice(0)) disposable.dispose();
  }
  _Disposable.disposeAll = disposeAll;
})(Disposable || (exports.Disposable = Disposable = {}));
class EventEmitter {
  constructor() {
    this.event = void 0;
    this._deliveryQueue = void 0;
    this._listeners = new Set();
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
    this.event = (listener, disposables) => {
      this._listeners.add(listener);
      let disposed = false;
      const self = this;
      const result = {
        dispose() {
          if (!disposed) {
            disposed = true;
            self._listeners.delete(listener);
          }
        }
      };
<<<<<<< HEAD
      if (disposables)
        disposables.push(result);
=======
      if (disposables) disposables.push(result);
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
      return result;
    };
  }
  fire(event) {
    const dispatch = !this._deliveryQueue;
<<<<<<< HEAD
    if (!this._deliveryQueue)
      this._deliveryQueue = [];
    for (const listener of this._listeners)
      this._deliveryQueue.push({ listener, event });
    if (!dispatch)
      return;
    for (let index = 0; index < this._deliveryQueue.length; index++) {
      const { listener, event: event2 } = this._deliveryQueue[index];
      listener.call(null, event2);
    }
    this._deliveryQueue = void 0;
  }
  dispose() {
    this._listeners.clear();
    if (this._deliveryQueue)
      this._deliveryQueue = [];
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Disposable,
  EventEmitter
});
=======
    if (!this._deliveryQueue) this._deliveryQueue = [];
    for (const listener of this._listeners) this._deliveryQueue.push({
      listener,
      event
    });
    if (!dispatch) return;
    for (let index = 0; index < this._deliveryQueue.length; index++) {
      const {
        listener,
        event
      } = this._deliveryQueue[index];
      listener.call(null, event);
    }
    this._deliveryQueue = undefined;
  }
  dispose() {
    this._listeners.clear();
    if (this._deliveryQueue) this._deliveryQueue = [];
  }
}
exports.EventEmitter = EventEmitter;
>>>>>>> 0bbb606fffa4286e884fc3bf9391c67f4bdb0fbb
